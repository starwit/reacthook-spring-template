version: "3.9"
services:
  reacthookspring-db:
    image: mariadb:latest
    restart: on-failure
    environment:
      MYSQL_DATABASE: 'reacthookspring'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'reacthookspring'
      # You can use whatever password you like
      MYSQL_PASSWORD: 'reacthookspring'
      # Password for root access
      MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3306:3306'
    healthcheck:
      test: ["CMD", "mysql" ,"-h", "localhost", "-P", "3306", "-u", "root", "-e", "select 1", "reacthookspring"]
      interval: 5s
      timeout: 60s
      retries: 30
    volumes:
      - reacthookspringv2-db-data:/var/lib/mysql
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend

  reacthookspring-db-keycloak:
    image: mariadb:latest
    restart: on-failure
    environment:
      MYSQL_DATABASE: 'keycloak'
      MYSQL_USER: 'keycloak'
      MYSQL_PASSWORD: 'keycloak'
      MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
      MYSQL_TCP_PORT: 3307
    healthcheck:
      test: ["CMD", "mysql" ,"-h", "localhost", "-P", "3307", "-u", "root", "-e", "select 1", "keycloak"]
      interval: 5s
      timeout: 60s
      retries: 30
    volumes:
      - reacthookspring-keycloak-db-data:/var/lib/mysql
    networks:
      - backend

  reacthookspring-keycloak:
    image: quay.io/keycloak/keycloak
    volumes:
      - ./keycloak/imports:/opt/keycloak/data/import
    depends_on:
      reacthookspring-db-keycloak:
        condition: service_healthy
    restart: on-failure
    environment:
      KC_DB_URL: jdbc:postgresql://reacthookspring-db-keycloak:5432/keycloak
      KC_DB: postgres
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HTTP_RELATIVE_PATH: /auth/
    command: start-dev --import-realm
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '8080:8080'
    networks:
      - backend

# Names our volume
volumes:
  reacthookspringv2-db-data:
  reacthookspring-keycloak-db-data:

 # Networks to be created to facilitate communication between containers
networks:
  backend:
